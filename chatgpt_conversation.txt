ChatGPT Conversation — Book Finder App

Candidate ID: Naukri0925
Name: Shaik Peda Khasim

Prompt:
"Help me design a React Book Finder that uses the Open Library Search API. I want components: SearchBar, BookList, BookCard, and a fetch function with error handling. Also suggest UI and a short video demo script."

ChatGPT Suggestions:

1. File Structure
- src/api/openLibrary.js         → for API fetch functions
- src/components/SearchBar.jsx   → search input with debounce
- src/components/BookList.jsx    → list of BookCard components
- src/components/BookCard.jsx    → individual book details display
- src/App.jsx                    → main app, manages state and fetch

2. API Fetch Function
- fetchBooksByTitle(title):
  ```javascript
  try {
      const response = await fetch(`https://openlibrary.org/search.json?title=${title}`);
      const data = await response.json();
      return data.docs;
  } catch (error) {
      console.error("Error fetching books:", error);
      return [];
  }

Components Recommendations:

SearchBar: debounced input for user search queries

BookCard: display cover, title, author, publish year

BookList / ResultsGrid: grid layout for BookCards

FiltersButton: for year filtering

QuickSearches: popular query buttons

Tabs: switch between "Recent Searches" and "Results"

Features & UX Suggestions:

Debounced search to minimize API calls

ARIA roles and aria-live for accessibility

Responsive grid layout for desktop and mobile

Clear button in filters

Recent search history (last 5 searches)

Error handling for empty results or failed fetch

Video Demo Script:

Hi — I'm Shaik Peda Khasim, Candidate ID Naukri0925.
This is my Book Finder app for Aganitha.

Steps:

Search for "Harry Potter" — results appear with covers and authors.

Show no-results handling (search for random string).

Resize to mobile to show responsiveness.

Open key code files (src/api/openLibrary.js and src/components/BookCard.jsx).

Show chatgpt_conversation.txt (LLM proof) and README with Candidate ID.

Thank you — I can explain choices in interview.

